@using System.Text
@model GovUkTextInputPattern
@{
    var formGroupClassList = new List<string>
    {
        "govuk-form-group"
    };
    var inputClassList = new List<string>
    {
        "govuk-input"
    };

    if (Model.ErrorMessage != null)
    {
        var errMsgClass = "govuk-form-group--error";
        formGroupClassList.Add(errMsgClass);
        inputClassList.Add(errMsgClass);
    }

    /** BGN Wrapper / Formgroup styles **/
    if (Model.FormGroup?.Classes != null && Model.FormGroup?.Classes.Count > 0)
    {
        formGroupClassList.AddRange(Model.FormGroup.Classes);
    }
    var wrapperCssClasses = new HtmlString(string.Join(" ", formGroupClassList));
    /** END Wrapper / Formgroup styles **/

    /** BGN Input styles **/
    if (Model.Classes != null && Model.Classes.Count() > 0)
    {
        inputClassList.AddRange(Model.Classes);
    }
    var inputCssClasses = new HtmlString(string.Join(" ", inputClassList));
    /** END Input styles **/

    Model.Label.For = new HtmlString(Model.Id);

    var prefixSuffixSet = false;
    var prefixSuffixTagStart = new HtmlString(@"<div class=""govuk-input__wrapper"">");
    var prefisSuffixTagEnd = new HtmlString(@"</div>");
    if (Model.Prefix != null || Model.Suffix != null)
    {
        prefixSuffixSet = true;
    }
}
<div class="@wrapperCssClasses">
    <vc:gov-uk-label label=Model.Label></vc:gov-uk-label>

    @{
        var describedBy = Model.DescribedBy;
        if (Model.Hint != null)
        {
            Model.Hint.Id = $"{Model.Hint.Id}-hint";

            if (!string.IsNullOrWhiteSpace(describedBy))
            {
                describedBy = $"{describedBy}{Model.Hint.Id}";
            }

            <vc:gov-uk-hint hint=Model.Hint></vc:gov-uk-hint>
        }

        if (Model.ErrorMessage != null)
        {
            Model.ErrorMessage.Id   = $"{Model.Id}-error";

            if (!string.IsNullOrWhiteSpace(describedBy))
            {
                describedBy = $"{describedBy}{Model.ErrorMessage.Id}";
            }

            <vc:gov-uk-error-message error-message=Model.ErrorMessage></vc:gov-uk-error-message>
        }
    }

    @if (prefixSuffixSet)
    {
        @if (!string.IsNullOrWhiteSpace(Model.Prefix.Text) || Model.Prefix.Html != null)
        {
            @prefixSuffixTagStart

            var baseCssClass = $"class=\"govuk-input__prefix";
            HtmlString cssClass;
            if (Model.Classes != null)
            {
                var cssClasString = new StringBuilder();
                foreach (var @class in Model.Classes)
                {
                    cssClasString.Append($" {@class}");
                }
                cssClass = new HtmlString($"{baseCssClass} {cssClasString.ToString()}\"");
            }
            else
            {
                cssClass = new HtmlString($"{baseCssClass}\"");
            }
            <div @cssClass aria-hidden="true">
                @if (Model.Prefix.Html != null)
                {
                    @Model.Prefix.Html;
                }
                else
                {
                    @Model.Prefix.Text;
                }
            </div>
        }
    }

    @{
        HtmlString spellCheck = null;
        if (Model.SpellCheck.HasValue)
        {
            spellCheck = new HtmlString($"spellcheck=\"{Model.SpellCheck}\"");
        }

        HtmlString value = null;
        if (!string.IsNullOrWhiteSpace(Model.Value))
        {
            value = new HtmlString($"value=\"{Model.Value}\"");
        }

        HtmlString describedByAttr = null;
        if (!string.IsNullOrWhiteSpace(describedBy))
        {
            describedByAttr = new HtmlString($"aria-describedby=\"{describedBy}\"");
        }

        HtmlString autocomplete = null;
        if (!string.IsNullOrWhiteSpace(Model.AutoComplete))
        {
            autocomplete = new HtmlString($"autocomplete=\"{Model.AutoComplete}\"");
        }

        HtmlString pattern = null;
        if (!string.IsNullOrWhiteSpace(Model.Pattern))
        {
            pattern = new HtmlString($"pattern=\"{Model.Pattern}\"");
        }

        HtmlString inputmode = null;
        if (!string.IsNullOrWhiteSpace(Model.InputMode))
        {
            inputmode = new HtmlString($"inputmode=\"{Model.InputMode}\"");
        }

        var attributes = string.Empty;
        if (Model.Attributes != null)
        {
            var attributeBuilder = new StringBuilder();
            foreach (var attribute in Model.Attributes)
            {
                attributeBuilder.Append($" {attribute.Item1}={attribute.Item2}");
            }
            attributes = attributeBuilder.ToString();
        }

        var inputType = Model.Type ?? "text";
        <input class="@inputCssClasses" id="@Model.Id" name="@Model.Name" type="@inputType" @spellCheck @value @describedByAttr @autocomplete @pattern @inputmode @attributes />

        if (Model.Suffix != null)
        {
            <div class="govuk-input__suffix" aria-hidden="true">
                @if (Model.Suffix.Html != null)
                {
                    @Model.Suffix.Html;
                }
                else
                {
                    @Model.Suffix.Text;
                }
            </div>

            @prefisSuffixTagEnd
        }
    }
</div>